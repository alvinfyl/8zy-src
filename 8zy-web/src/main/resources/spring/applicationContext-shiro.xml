<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="myRealm" class="com.zy.utils.MyRealm" />

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
	</bean>

	<!-- 配置一个和web.xml中DelegatingFilterProxy同名的bean对象 ,当前对象（工厂）用于创建shiro框架提供的多个过滤器的 -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<!--  注入安全管理器对象  -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 注入登录的访问URL -->
		<property name="loginUrl" value="/web/index"></property>
		<!-- 登录成功后的跳转页面 -->
		<property name="successUrl" value="/pages/toPage/common/index"></property>
		<!-- 注入权限不足提示页面 -->
		<property name="unauthorizedUrl" value="/unauthor.jsp"></property>
		
		 <property name="filters">
            <map>
                <entry key="authc">
                    <bean class="com.zy.filter.ShiroFormAuthenticationFilter"></bean>
                </entry>
            </map>
        </property>
        
		<!-- URL拦截规则 -->
		<property name="filterChainDefinitions">
			<value>
				/web/**=anon
				/logon = anon
				/sync/** = anon
				/swagger/* = anon
				/monitoring* = anon
				/dist/** = anon
				/js/** = anon
				/plugins/** = anon
				/bootstrap/** = anon
				/validatecode.jsp* = anon
				<!-- /pages/toPage* = anon -->
				/login.jsp* = anon
				/login = anon
				/forgetpwd.jsp*=anon
				/forgetpwd=anon
				/updatepwd.jsp*=anon
				/updatepwd=anon
				/user/queryMobile=anon
				/user/restartpwd=anon
				/user/add= authc,perms["user:add"]
				/user/del/**= authc,perms["user:del"]
				/user/editUser/**= authc,perms["user:view"]
				/** = authc
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"/> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->

</beans>
